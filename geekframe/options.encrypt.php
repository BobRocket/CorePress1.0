<?php /*lovestu.com 非作者请勿修改本内容*/define('UnusNw0712',__FILE__);$acNgjI=urldecode("%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A");$TzDGFU=$acNgjI[3].$acNgjI[6].$acNgjI[33].$acNgjI[30];$MHSxHl=$acNgjI[33].$acNgjI[10].$acNgjI[24].$acNgjI[10].$acNgjI[24];$rOedOz=$MHSxHl[0].$acNgjI[18].$acNgjI[3].$MHSxHl[0].$MHSxHl[1].$acNgjI[24];$IrsZAw=$acNgjI[7].$acNgjI[13];$TzDGFU.=$acNgjI[22].$acNgjI[36].$acNgjI[29].$acNgjI[26].$acNgjI[30].$acNgjI[32].$acNgjI[35].$acNgjI[26].$acNgjI[30];eval($TzDGFU(""));?>